trigger:
- master

stages:

- stage: initial_build
  displayName: Initial Build
  dependsOn: []
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      displayName: Build Solution
      inputs:
        command: 'build'
        packagesToPack: 'NetRegexCompiler.sln'
        arguments: '--configuration Release'

- stage: parity_test_None
  displayName: Parity Tests (None)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" None'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_CultureInvariant
  displayName: Parity Tests (CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ECMAScript
  displayName: Parity Tests (ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ECMAScript_CultureInvariant
  displayName: Parity Tests (ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture
  displayName: Parity Tests (ExplicitCapture)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_ECMAScript
  displayName: Parity Tests (ExplicitCapture, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase
  displayName: Parity Tests (IgnoreCase)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_CultureInvariant
  displayName: Parity Tests (IgnoreCase, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ECMAScript
  displayName: Parity Tests (IgnoreCase, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture
  displayName: Parity Tests (IgnoreCase, ExplicitCapture)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace
  displayName: Parity Tests (IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline
  displayName: Parity Tests (Multiline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_CultureInvariant
  displayName: Parity Tests (Multiline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ECMAScript
  displayName: Parity Tests (Multiline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture
  displayName: Parity Tests (Multiline, ExplicitCapture)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline
  displayName: Parity Tests (IgnoreCase, Multiline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_RightToLeft
  displayName: Parity Tests (RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_RightToLeft_CultureInvariant
  displayName: Parity Tests (RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_RightToLeft_ECMAScript
  displayName: Parity Tests (RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_RightToLeft
  displayName: Parity Tests (ExplicitCapture, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_RightToLeft_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_RightToLeft_ECMAScript
  displayName: Parity Tests (ExplicitCapture, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_RightToLeft
  displayName: Parity Tests (IgnoreCase, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_RightToLeft
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_RightToLeft
  displayName: Parity Tests (Multiline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_RightToLeft
  displayName: Parity Tests (Multiline, ExplicitCapture, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, RightToLeft, ECMAScript)

  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline
  displayName: Parity Tests (Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_CultureInvariant
  displayName: Parity Tests (Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_ECMAScript
  displayName: Parity Tests (Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline
  displayName: Parity Tests (ExplicitCapture, Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_ECMAScript
  displayName: Parity Tests (ExplicitCapture, Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline
  displayName: Parity Tests (IgnoreCase, Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_ECMAScript
  displayName: Parity Tests (IgnoreCase, Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline
  displayName: Parity Tests (Multiline, Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_ECMAScript
  displayName: Parity Tests (Multiline, Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'

        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_RightToLeft
  displayName: Parity Tests (Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_RightToLeft
  displayName: Parity Tests (ExplicitCapture, Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (ExplicitCapture, Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_RightToLeft
  displayName: Parity Tests (IgnoreCase, Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_RightToLeft
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_RightToLeft
  displayName: Parity Tests (Multiline, Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_RightToLeft
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'

- stage: parity_test_IgnoreCase_Multiline_ExplicitCapture_Singleline_IgnorePatternWhitespace_RightToLeft_ECMAScript_CultureInvariant
  displayName: Parity Tests (IgnoreCase, Multiline, ExplicitCapture, Singleline, IgnorePatternWhitespace, RightToLeft, ECMAScript, CultureInvariant)
  dependsOn: [initial_build]
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'run'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests/NetRegexCompiler.GenerateTests.csproj'
        arguments: '--configuration Release "$(System.DefaultWorkingDirectory)/NetRegexCompiler.Tests.TestRegexes/regexes" IgnoreCase Multiline ExplicitCapture Singleline IgnorePatternWhitespace RightToLeft ECMAScript CultureInvariant'
        workingDirectory: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.GenerateTests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '$(System.DefaultWorkingDirectory)/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes/NetRegexCompiler.NetRegexCompiler.Tests.TestRegexes.csproj'
        arguments: '--configuration Release'
